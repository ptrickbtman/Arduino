

#include <Adafruit_Fingerprint.h>
#include "Keypad.h"

// lector de huellas
SoftwareSerial mySerial(2, 3);
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

const int ledPIN = 10;

// teclado

const byte ROWS = 4; //four rows
const byte COLS = 3; //three columns
char keys[ROWS][COLS] = {
{'1','2','3'},
{'4','5','6'},
{'7','8','9'},
{'*','0','#'}
};

 byte rowPins[ROWS] = {2,3,4,5}; //connect to the row pinouts of the   keypad  
 byte colPins[COLS] = {6, 7, 8}; //connect to the column pinouts of the keypad
 Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// contraseñas
char passwrd[7];
char cst[7]="*1998#";
int contadorTeclado = 0;

 //para contador de intentos lector
 int data = 0;

void setup()  
{
 
  Serial.begin(9600);
  while (!Serial);  // For Yun/Leo/Micro/Zero/...
  delay(100);
  //Serial.println("\n\nAdafruit finger detect test");

  // set the data rate for the sensor serial port
  finger.begin(57600);
  delay(5);
  if (finger.verifyPassword()) {
    Serial.println("Sensor encontrado");
  } else {
    Serial.println("Sensor no esta conectado :(");
    while (1) { delay(1); }
  }

  finger.getTemplateCount();
/*
 * Cuenta las cantidades de dedos almacenados en sensor
    if (finger.templateCount == 0) {
    Serial.print("Sensor doesn't contain any fingerprint data. Please run the 'enroll' example.");
  } 
  else {
    Serial.println("Waiting for valid finger...");
      Serial.print("Sensor contains "); Serial.print(finger.templateCount); Serial.println(" templates");
  }

*/

}

void loop()                     // run over and over again
{

  if(contadorTeclado >=6){
        Serial.println("Renaduando proceso");
        abrir();
        
  }
  
  while (data<=4 || data ==0){
  if (getFingerprintIDez() == 2){
      abrir();  
    }else if (getFingerprintIDez()==-2){
      data += 1;
      Serial.println ("Intentos fallido: "); Serial.println(data);
      if (data ==5){
        Serial.println("Ingrese contraseña manual");
        }
      }
  }

 
  char key = keypad.getKey();
  if (key){
    Serial.println(key);

    

    if (contadorTeclado == 0){
        if(key == cst[contadorTeclado] ){
          contadorTeclado += 1;
          }
      
      }else if (contadorTeclado!=0){
        if(key == cst[contadorTeclado] ){
            contadorTeclado += 1;
          }else{
            Serial.println("error te equivocaste, toro de nuevo");
            contadorTeclado = 0;
          }
      }
    }
     //getFingerprintIDez();
     //Serial.println(getFingerprintIDez());
     //delay(60);   
}

uint8_t getFingerprintID() {
  uint8_t p = finger.getImage();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println("No finger detected");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  // OK success!

  p = finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }
  
  // OK converted!
  p = finger.fingerFastSearch();
  if (p == FINGERPRINT_OK) {
    Serial.println("Found a print match!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_NOTFOUND) {
    Serial.println("Did not find a match");
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }   
  
  // found a match!
  //Serial.print("Found ID #"); Serial.print(finger.fingerID); 
  //Serial.print(" with confidence of "); Serial.println(finger.confidence); 
 
  return finger.fingerID;
}

// returns -1 if failed, otherwise returns ID #
int getFingerprintIDez() {

 
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK)  return -2; // si es dos, es por que no encontro huella, es decir intentos fallidos +1
  
  // found a match!
  Serial.print("ID USUARIO:  "); Serial.println(finger.fingerID); //id del dedo 
  // Serial.print(" with confidence of "); Serial.println(finger.confidence);
  return 2;
   
}

void abrir(){
  
  pinMode(ledPIN , OUTPUT);
  digitalWrite(ledPIN , HIGH);   // poner el Pin en HIGH
  delay(1000);                   // esperar un segundo
  digitalWrite(ledPIN , LOW);    // poner el Pin en LOW
  delay(1000);                   // esperar un segundo
  data = 0;
  contadorTeclado = 0;
}
